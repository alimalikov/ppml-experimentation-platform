{
  "adaboost_classifier_plugin": {
    "score_methods": [],
    "analysis_methods": [
      "get_boosting_analysis",
      "plot_boosting_analysis"
    ],
    "metric_calculations": [],
    "result_dictionaries": [
      "return {\n            \"n_estimators\": n_estimators,\n            \"learning_rate\": learning_rate,\n            \"algorithm\": algorithm,\n            \"random_state\": random_state,\n            \"base_estimator_type\": base_estimator_type,\n            \"max_depth\": max_depth,\n            \"min_samples_split\": min_samples_split,\n            \"min_samples_leaf\": min_samples_leaf,\n            \"max_features\": max_features,\n            \"early_stopping\": early_stopping,\n            \"validation_fraction\": validation_fraction,\n            \"n_iter_no_change\": n_iter_no_change,\n            \"tol\": tol,\n            \"_ui_options\": {\n                \"monitor_training\": monitor_training,\n                \"show_boosting_analysis\": show_boosting_analysis,\n                \"show_learning_curves\": show_learning_curves\n            }"
    ]
  },
  "adaboost_regressor_plugin": {
    "score_methods": [
      "_calculate_robustness_score",
      "_calculate_performance_contribution",
      "_profile_performance",
      "_compare_loss_function_performance",
      "_rank_methods_by_performance",
      "_get_training_performance_summary",
      "_get_cv_performance_summary"
    ],
    "analysis_methods": [
      "get_analysis_results",
      "_analyze_feature_importance",
      "_analyze_boosting_process",
      "_analyze_base_estimators",
      "_analyze_convergence",
      "_analyze_error_evolution",
      "_analyze_learning_curves",
      "_analyze_cross_validation",
      "_analyze_loss_function_impact",
      "_analyze_prediction_variance",
      "_analyze_estimator_comparison",
      "_analyze_ensemble_prediction_diversity",
      "_analyze_residuals",
      "_analyze_error_distribution_changes",
      "_analyze_overfitting_from_curves",
      "_analyze_data_efficiency",
      "_analyze_convergence_by_size"
    ],
    "metric_calculations": [],
    "result_dictionaries": [
      "return {\n            'predictions': final_predictions,\n            'staged_predictions': staged_predictions,\n            'confidence_scores': confidence_scores,\n            'prediction_variance': prediction_variance,\n            'stability_scores': stability_scores,\n            'estimator_weights': estimator_weights,\n            'estimator_contributions': estimator_contributions,\n            'n_estimators_used': len",
      "return {\n                'entropy': entropy,\n                'normalized_entropy': normalized_entropy,\n                'coefficient_of_variation': weight_cv,\n                'effective_estimators': effective_estimators,\n                'weight_concentration': np.max",
      "return {\n                'entropy': 0.0,\n                'normalized_entropy': 0.0,\n                'coefficient_of_variation': 0.0,\n                'effective_estimators': 1.0,\n                'weight_concentration': 1.0,\n                'diversity_score': 0.0\n            }",
      "return {\n                'overall_diversity': diversity_score,\n                'mean_correlation': mean_correlation,\n                'diversity_evolution': diversity_evolution,\n                'final_diversity': diversity_evolution[-1] if diversity_evolution else diversity_score,\n                'correlation_matrix': correlations,\n                'diversity_trend': np.polyfit",
      "return {\n                'model_type': 'unknown',\n                'n_parameters': 0,\n                'complexity_score': 0.0\n            }",
      "return {\n                'estimated_memory_mb': memory_mb,\n                'memory_efficiency_score': 1.0 /",
      "return {\n                'estimated_memory_mb': 0.0,\n                'memory_efficiency_score': 0.5\n            }",
      "return {\n                    'quality_score': 0.0,\n                    'quality_rating': 'unknown',\n                    'quality_factors': {}",
      "return {\n                'quality_score': quality_score,\n                'quality_rating': quality_rating,\n                'quality_factors': quality_factors,\n                'weighted_factors': dict",
      "return {\n                'quality_score': 0.5,\n                'quality_rating': 'unknown',\n                'quality_factors': {}",
      "return {\n                'overfitting_score': 0.0,\n                'overfitting_severity': 'unknown',\n                'gap_analysis': {}",
      "return {\n                'efficiency_score': 0.0,\n                'optimal_data_size': None,\n                'diminishing_returns_point': None,\n                'data_utilization': {}",
      "return {'error': 'Model must be fitted before getting analysis results'}",
      "return {'error': 'Cross-validation analysis not performed'}",
      "return {'error': 'Convergence analysis not performed'}"
    ]
  },
  "automatic_relevance_determination_regression_plugin": {
    "score_methods": [],
    "analysis_methods": [
      "get_ard_analysis",
      "_analyze_convergence",
      "_analyze_alpha_convergence",
      "_analyze_evidence",
      "_analyze_feature_selection",
      "_analyze_alpha_distribution",
      "_analyze_relevance_evolution",
      "_analyze_uncertainty",
      "_analyze_ard_specific_uncertainty",
      "_analyze_sparsity",
      "_analyze_alpha_evolution",
      "_analyze_alpha_convergence_pattern"
    ],
    "metric_calculations": [],
    "result_dictionaries": [
      "return {\n                'n_selected_features': n_selected,\n                'selection_ratio': selection_ratio,\n                'alpha_separation_ratio': alpha_separation,\n                'alpha_consistency': alpha_consistency,\n                'selection_quality_score': min",
      "return {\n                'r2_score': r2,\n                'sparsity_ratio': sparsity_ratio,\n                'n_active_features': np.sum",
      "return {\n                'alpha_coef_correlation': alpha_coef_correlation,\n                'active_coef_magnitude': active_coef_magnitude,\n                'active_alpha_consistency': active_alpha_consistency,\n                'pruning_decisiveness': pruning_decisiveness,\n                'overall_quality_score':",
      "return {\n            \"n_iter\": n_iter,\n            \"tol\": tol,\n            \"alpha_1\": alpha_1,\n            \"alpha_2\": alpha_2,\n            \"lambda_1\": lambda_1,\n            \"lambda_2\": lambda_2,\n            \"alpha_init\": alpha_init,\n            \"lambda_init\": lambda_init,\n            \"compute_score\": compute_score,\n            \"fit_intercept\": fit_intercept,\n            \"normalize_features\": normalize_features,\n            \"copy_X\": copy_X,\n            \"verbose\": verbose,\n            \"threshold_lambda\": threshold_lambda,\n            \"automatic_pruning\": automatic_pruning,\n            \"relevance_threshold\": relevance_threshold,\n            \"track_alpha_evolution\": track_alpha_evolution,\n            \"convergence_analysis\": convergence_analysis,\n            \"evidence_analysis\": evidence_analysis,\n            \"feature_selection_analysis\": feature_selection_analysis,\n            \"relevance_evolution_analysis\": relevance_evolution_analysis,\n            \"uncertainty_decomposition\": uncertainty_decomposition,\n            \"sparsity_analysis\": sparsity_analysis,\n            \"random_state\": random_state\n        }",
      "return {'error': analysis['error']}",
      "return {\n            'feature_importance': feature_importance_dict,\n            'top_features': top_features,\n            'selection_summary': {\n                'n_selected': analysis['n_selected_features'],\n                'n_pruned': analysis['n_pruned_features'],\n                'selection_ratio': analysis['selection_ratio'],\n                'threshold_lambda': analysis['threshold_lambda']\n            }",
      "return {\n            \"convergence_analysis\": self.convergence_analysis_,\n            \"evidence_analysis\": self.evidence_analysis_,\n            \"feature_selection_analysis\": self.feature_selection_analysis_,\n            \"relevance_evolution_analysis\": self.relevance_evolution_analysis_,\n            \"uncertainty_analysis\": self.uncertainty_analysis_,\n            \"sparsity_analysis\": self.sparsity_analysis_,\n            \"alpha_evolution_analysis\": self.alpha_evolution_analysis_\n        }"
    ]
  },
  "bagging_classifier_plugin": {
    "score_methods": [],
    "analysis_methods": [
      "get_ensemble_analysis",
      "plot_ensemble_analysis",
      "_analyze_bootstrap_samples",
      "_analyze_ensemble"
    ],
    "metric_calculations": [],
    "result_dictionaries": [
      "return {\n            \"n_estimators\": n_estimators,\n            \"base_estimator\": base_estimator,\n            \"max_samples\": max_samples,\n            \"max_features\": max_features,\n            \"bootstrap\": bootstrap,\n            \"bootstrap_features\": bootstrap_features,\n            \"oob_score\": oob_score,\n            \"warm_start\": warm_start,\n            \"n_jobs\": n_jobs,\n            \"auto_scale_features\": auto_scale_features,\n            \"cross_validation_folds\": cross_validation_folds,\n            \"estimate_feature_importance\": estimate_feature_importance,\n            \"random_state\": random_state,\n            \"verbose\": verbose,\n            # Base estimator parameters\n            \"dt_max_depth\": dt_max_depth,\n            \"dt_min_samples_split\": dt_min_samples_split,\n            \"dt_min_samples_leaf\": dt_min_samples_leaf,\n            \"dt_criterion\": dt_criterion,\n            \"dt_max_features\": dt_max_features,\n            \"lr_C\": lr_C,\n            \"lr_max_iter\": lr_max_iter,\n            \"lr_solver\": lr_solver,\n            \"knn_n_neighbors\": knn_n_neighbors,\n            \"knn_weights\": knn_weights,\n            \"knn_metric\": knn_metric,\n            \"svm_C\": svm_C,\n            \"svm_kernel\": svm_kernel,\n            \"svm_probability\": svm_probability,\n            \"mlp_hidden_layer_sizes\": mlp_hidden_layer_sizes,\n            \"mlp_activation\": mlp_activation,\n            \"mlp_max_iter\": mlp_max_iter\n        }",
      "return {\n            \"n_features\": self.n_features_in_,\n            \"n_classes\": len"
    ]
  },
  "bayesian_ridge_regression_plugin": {
    "score_methods": [],
    "analysis_methods": [
      "get_bayesian_analysis",
      "plot_bayesian_analysis",
      "_analyze_convergence",
      "_analyze_evidence",
      "_analyze_hyperparameter_evolution",
      "_analyze_uncertainty",
      "_analyze_feature_relevance",
      "_analyze_posterior_distribution"
    ],
    "metric_calculations": [],
    "result_dictionaries": [
      "return {\n            \"n_iter\": n_iter,\n            \"tol\": tol,\n            \"alpha_1\": alpha_1,\n            \"alpha_2\": alpha_2,\n            \"lambda_1\": lambda_1,\n            \"lambda_2\": lambda_2,\n            \"alpha_init\": alpha_init,\n            \"lambda_init\": lambda_init,\n            \"compute_score\": compute_score,\n            \"fit_intercept\": fit_intercept,\n            \"normalize_features\": normalize_features,\n            \"copy_X\": copy_X,\n            \"verbose\": verbose,\n            \"compute_prediction_intervals\": compute_prediction_intervals,\n            \"confidence_level\": confidence_level,\n            \"n_posterior_samples\": n_posterior_samples,\n            \"convergence_analysis\": convergence_analysis,\n            \"evidence_analysis\": evidence_analysis,\n            \"hyperparameter_evolution\": hyperparameter_evolution,\n            \"uncertainty_decomposition\": uncertainty_decomposition,\n            \"feature_relevance_analysis\": feature_relevance_analysis,\n            \"use_informative_priors\": use_informative_priors,\n            \"random_state\": random_state\n        }",
      "return {'error': analysis['error']}",
      "return {\n            'feature_importance': feature_importance,\n            'top_features': top_features,\n            'significance_threshold': analysis['significance_threshold'],\n            'bayesian_info': {\n                'alpha': self.model_.alpha_,\n                'lambda': self.model_.lambda_,\n                'automatic_regularization': True,\n                'uncertainty_quantified': True\n            }",
      "return {\n            \"convergence_analysis\": self.convergence_analysis_,\n            \"evidence_analysis\": self.evidence_analysis_,\n            \"hyperparameter_evolution\": self.hyperparameter_evolution_,\n            \"uncertainty_analysis\": self.uncertainty_analysis_,\n            \"feature_relevance_analysis\": self.feature_relevance_analysis_,\n            \"posterior_analysis\": self.posterior_analysis_\n        }"
    ]
  },
  "catboost_classifier_plugin": {
    "score_methods": [],
    "analysis_methods": [
      "get_categorical_analysis",
      "plot_categorical_analysis",
      "_analyze_categorical_features"
    ],
    "metric_calculations": [],
    "result_dictionaries": [
      "return {\n            \"iterations\": iterations,\n            \"learning_rate\": learning_rate,\n            \"depth\": depth,\n            \"l2_leaf_reg\": l2_leaf_reg,\n            \"model_size_reg\": model_size_reg,\n            \"rsm\": rsm,\n            \"loss_function\": 'MultiClass',  # Will be set automatically\n            \"border_count\": border_count,\n            \"feature_border_type\": feature_border_type,\n            \"od_pval\": od_pval,\n            \"od_wait\": od_wait,\n            \"od_type\": od_type,\n            \"nan_mode\": nan_mode,\n            \"counter_calc_method\": counter_calc_method,\n            \"thread_count\": -1,\n            \"random_seed\": random_seed,\n            \"verbose\": False,\n            \"silent\": True,\n            \"logging_level\": 'Silent',\n            \"max_ctr_complexity\": max_ctr_complexity,\n            \"one_hot_max_size\": one_hot_max_size,\n            \"random_strength\": random_strength,\n            \"bagging_temperature\": bagging_temperature,\n            \"boosting_type\": boosting_type,\n            \"grow_policy\": grow_policy,\n            \"score_function\": score_function,\n            \"bootstrap_type\": bootstrap_type,\n            \"task_type\": task_type,\n            \"cat_features\": None if auto_detect_cat else [],  # Will be auto-detected\n            \"early_stopping_rounds\": od_wait,\n            \"allow_writing_files\": False\n        }",
      "return {\n            \"n_features\": self.n_features_in_,\n            \"n_classes\": len",
      "return {\n            \"name\": self._name,\n            \"category\": self._category,\n            \"type\": self._algorithm_type,\n            \"description\": self._description,\n            \"paper_reference\": self._paper_reference,\n            \"framework\": \"Yandex CatBoost\",\n            \"key_innovations\": {\n                \"ordered_boosting\": \"Reduces overfitting through ordered target statistics\",\n                \"categorical_feature_combinations\": \"Automatic categorical feature combination generation\",\n                \"oblivious_trees\": \"Symmetric trees with same split condition on each level\",\n                \"target_statistics\": \"Advanced categorical encoding using target statistics\",\n                \"minimal_parameter_tuning\": \"Works well with default parameters\",\n                \"gpu_acceleration\": \"Efficient GPU training for large datasets\"\n            }"
    ]
  },
  "catboost_regressor_plugin": {
    "score_methods": [
      "_assess_regularization_effectiveness",
      "_profile_performance",
      "_get_performance_recommendations"
    ],
    "analysis_methods": [
      "get_analysis_results",
      "_analyze_feature_importance",
      "_analyze_catboost_specifics",
      "_analyze_categorical_features",
      "_analyze_overfitting_behavior",
      "_analyze_convergence",
      "_analyze_regularization_effects",
      "_analyze_categorical_encoding",
      "_analyze_cross_validation",
      "_analyze_tree_structure",
      "_analyze_prediction_uncertainty",
      "_analyze_feature_interactions"
    ],
    "metric_calculations": [],
    "result_dictionaries": [
      "return {\n                'predictions': pred_values,\n                'uncertainty': uncertainty_values,\n                'uncertainty_score': uncertainty_score,\n                'confidence_95_lower': confidence_95_lower,\n                'confidence_95_upper': confidence_95_upper,\n                'prediction_interval_width': confidence_95_upper - confidence_95_lower,\n                'prediction_stability': 1.0 /",
      "return {\n                'predictions': pred_values,\n                'uncertainty': fallback_uncertainty,\n                'uncertainty_score': fallback_uncertainty /",
      "return {\n                'overall_quality': quality,\n                'mean_uncertainty_score': mean_uncertainty_score,\n                'mean_stability': mean_stability,\n                'uncertainty_consistency': uncertainty_consistency,\n                'reliability': 'High' if uncertainty_consistency > 0.8 else 'Moderate' if uncertainty_consistency > 0.6 else 'Low'\n            }",
      "return {\n            # Core boosting parameters\n            'iterations': self.iterations,\n            'learning_rate': self.learning_rate,\n            'depth': self.depth,\n            'l2_leaf_reg': self.l2_leaf_reg,\n            \n            # Categorical handling\n            'one_hot_max_size': self.one_hot_max_size,\n            'max_ctr_complexity': self.max_ctr_complexity,\n            \n            # Model structure\n            'model_size_reg': self.model_size_reg,\n            'rsm': self.rsm,\n            'border_count': self.border_count,\n            'feature_border_type': self.feature_border_type,\n            \n            # Regularization\n            'bagging_temperature': self.bagging_temperature,\n            'random_strength': self.random_strength,\n            'bootstrap_type': self.bootstrap_type,\n            'subsample': self.subsample,\n            \n            # Training control\n            'random_seed': self.random_seed,\n            'thread_count': self.thread_count,\n            'early_stopping_rounds': self.early_stopping_rounds,\n            \n            # Loss function\n            'loss_function': self.loss_function,\n            'eval_metric': self.eval_metric\n        }"
    ]
  },
  "decision_tree_classifier_plugin": {
    "score_methods": [],
    "analysis_methods": [],
    "metric_calculations": [],
    "result_dictionaries": [
      "return {\n            \"name\": self._name,\n            \"category\": self._category,\n            \"type\": self._algorithm_type,\n            \"description\": self._description,\n            \"paper_reference\": self._paper_reference,\n            \"interpretability\": \"Very High\",\n            \"strengths\": [\n                \"Highly interpretable - generates clear if-then rules\",\n                \"No assumptions about data distribution\",\n                \"Handles both numerical and categorical features\",\n                \"No need for feature scaling\",\n                \"Automatic feature selection\",\n                \"Can capture non-linear relationships\",\n                \"Fast training and prediction\",\n                \"Robust to outliers in features"
    ]
  },
  "decision_tree_regressor_plugin": {
    "score_methods": [
      "_calculate_interpretability_score",
      "_calculate_complexity_score",
      "_assess_cv_performance"
    ],
    "analysis_methods": [
      "get_tree_analysis",
      "plot_tree_analysis",
      "_analyze_feature_importance",
      "_analyze_tree_structure",
      "_analyze_node_statistics",
      "_analyze_splits",
      "_analyze_decision_paths",
      "_analyze_pruning_effects",
      "_analyze_overfitting",
      "_analyze_complexity",
      "_analyze_stability",
      "_analyze_cross_validation"
    ],
    "metric_calculations": [
      "calculate_balance"
    ],
    "result_dictionaries": [
      "return {\n                'level': level,\n                'r2_coefficient_of_variation': r2_cv,\n                'structure_coefficient_of_variation': structure_cv,\n                'r2_range': metrics['r2_stability']['range']\n            }",
      "return {\n            \"criterion\": criterion,\n            \"splitter\": splitter,\n            \"max_depth\": max_depth,\n            \"min_samples_split\": min_samples_split,\n            \"min_samples_leaf\": min_samples_leaf,\n            \"min_weight_fraction_leaf\": min_weight_fraction_leaf,\n            \"max_features\": max_features,\n            \"max_leaf_nodes\": max_leaf_nodes,\n            \"min_impurity_decrease\": min_impurity_decrease,\n            \"random_state\": random_state,\n            \"ccp_alpha\": ccp_alpha,\n            \"compute_feature_importance\": compute_feature_importance,\n            \"compute_permutation_importance\": compute_permutation_importance,\n            \"tree_interpretation_analysis\": tree_interpretation_analysis,\n            \"decision_path_analysis\": decision_path_analysis,\n            \"pruning_analysis\": pruning_analysis,\n            \"visualize_tree\": visualize_tree,\n            \"max_tree_depth_display\": max_tree_depth_display,\n            \"feature_importance_analysis\": feature_importance_analysis,\n            \"leaf_analysis\": leaf_analysis,\n            \"overfitting_analysis\": overfitting_analysis,\n            \"complexity_analysis\": complexity_analysis,\n            \"stability_analysis\": stability_analysis,\n            \"cross_validation_analysis\": cross_validation_analysis,\n            \"cv_folds\": cv_folds\n        }",
      "return {'error': analysis['error']}",
      "return {\n            'feature_importance': feature_importance,\n            'top_features': top_features,\n            'importance_statistics': analysis['importance_statistics'],\n            'tree_info': {\n                'n_nodes': self.model_.tree_.node_count,\n                'n_leaves': self.model_.tree_.n_leaves,\n                'max_depth': self.model_.tree_.max_depth,\n                'interpretable': True\n            }",
      "return {\n            \"feature_importance_analysis\": self.feature_importance_analysis_,\n            \"tree_analysis\": self.tree_analysis_,\n            \"decision_path_analysis\": self.decision_path_analysis_,\n            \"pruning_analysis\": self.pruning_analysis_,\n            \"overfitting_analysis\": self.overfitting_analysis_,\n            \"complexity_analysis\": self.complexity_analysis_,\n            \"stability_analysis\": self.stability_analysis_,\n            \"cross_validation_analysis\": self.cross_validation_analysis_\n        }"
    ]
  },
  "elastic_net_regression_plugin": {
    "score_methods": [],
    "analysis_methods": [
      "get_regularization_analysis",
      "_analyze_regularization_path_comprehensive",
      "_analyze_l1_ratio_effects",
      "_analyze_feature_selection",
      "_analyze_regularization_effect_on_features",
      "_analyze_regularization_balance",
      "_analyze_l1_l2_balance",
      "_analyze_feature_stability",
      "_analyze_feature_regularization_effect"
    ],
    "metric_calculations": [],
    "result_dictionaries": [
      "return {\n                'effect_category': effect,\n                'behavior_across_l1_ratios': feature_behavior,\n                'stability_score': len",
      "return {\n            'effect_category': 'selected' if abs",
      "return {\n            \"alpha\": alpha,\n            \"l1_ratio\": l1_ratio,\n            \"fit_intercept\": fit_intercept,\n            \"normalize_features\": normalize_features,\n            \"precompute\": precompute,\n            \"copy_X\": copy_X,\n            \"max_iter\": max_iter,\n            \"tol\": tol,\n            \"warm_start\": warm_start,\n            \"positive\": positive,\n            \"selection\": selection,\n            \"auto_alpha\": auto_alpha,\n            \"auto_l1_ratio\": auto_l1_ratio,\n            \"alpha_selection_method\": alpha_selection_method,\n            \"cv_folds\": cv_folds,\n            \"n_alphas\": n_alphas,\n            \"n_l1_ratios\": n_l1_ratios,\n            \"alpha_min_ratio\": alpha_min_ratio,\n            \"l1_ratio_range\": l1_ratio_range,\n            \"analyze_regularization_path\": analyze_regularization_path,\n            \"analyze_feature_stability\": analyze_feature_stability,\n            \"compute_feature_importance\": compute_feature_importance,\n            \"regularization_analysis\": regularization_analysis,\n            \"l1_l2_balance_analysis\": l1_l2_balance_analysis,\n            \"random_state\": random_state\n        }",
      "return {\n            \"algorithm\": \"Elastic Net Regression\",\n            \"n_features\": self.n_features_in_,\n            \"feature_names\": self.feature_names_,\n            \"alpha_used\": self.alpha_used_,\n            \"l1_ratio_used\": self.l1_ratio_used_,\n            \"l1_contribution\": self.alpha_used_ * self.l1_ratio_used_,\n            \"l2_contribution\": self.alpha_used_ *"
    ]
  },
  "extra_trees_classifier_plugin": {
    "score_methods": [
      "get_oob_score"
    ],
    "analysis_methods": [
      "get_randomization_analysis",
      "analyze_tree_diversity"
    ],
    "metric_calculations": [],
    "result_dictionaries": [
      "return {\n            \"n_estimators\": n_estimators,\n            \"criterion\": criterion,\n            \"max_depth\": max_depth,\n            \"min_samples_split\": min_samples_split,\n            \"min_samples_leaf\": min_samples_leaf,\n            \"min_weight_fraction_leaf\": 0.0,\n            \"max_features\": max_features,\n            \"max_leaf_nodes\": None,\n            \"min_impurity_decrease\": min_impurity_decrease,\n            \"bootstrap\": bootstrap,\n            \"oob_score\": oob_score,\n            \"n_jobs\": -1,  # Use all cores for better performance\n            \"random_state\": random_state,\n            \"verbose\": 0,\n            \"warm_start\": False,\n            \"class_weight\": class_weight,\n            \"ccp_alpha\": 0.0,\n            \"max_samples\": max_samples\n        }",
      "return {\n            'n_estimators': self.n_estimators,\n            'criterion': self.criterion,\n            'max_depth': self.max_depth,\n            'min_samples_split': self.min_samples_split,\n            'min_samples_leaf': self.min_samples_leaf,\n            'max_features': self.max_features,\n            'bootstrap': self.bootstrap,\n            'oob_score': self.oob_score,\n            'random_state': self.random_state,\n            'class_weight': self.class_weight,\n            'max_samples': self.max_samples\n        }"
    ]
  },
  "extra_trees_regressor_plugin": {
    "score_methods": [
      "_analyze_performance_benchmarks",
      "_rank_performance"
    ],
    "analysis_methods": [
      "get_ensemble_analysis",
      "_analyze_feature_importance",
      "_analyze_random_split_importance_impact",
      "_analyze_split_randomness",
      "_analyze_tree_diversity",
      "_analyze_ensemble_convergence",
      "_analyze_extra_trees_convergence",
      "_analyze_convergence_pattern",
      "_analyze_feature_interactions",
      "_analyze_random_split_interaction",
      "_analyze_interaction_stability",
      "_analyze_learning_curves",
      "_analyze_extra_trees_learning",
      "_analyze_learning_characteristics",
      "_analyze_hyperparameter_sensitivity",
      "_analyze_computational_efficiency",
      "_analyze_randomness_impact",
      "_analyze_randomness_effects",
      "_analyze_cross_validation",
      "_analyze_performance_benchmarks",
      "_analyze_split_quality",
      "_analyze_randomness_efficiency",
      "_analyze_bias_variance"
    ],
    "metric_calculations": [],
    "result_dictionaries": [
      "return {\n            'predictions': mean_predictions,\n            'std_predictions': std_predictions,\n            'confidence_95_lower': confidence_95_lower,\n            'confidence_95_upper': confidence_95_upper,\n            'prediction_interval_width': confidence_95_upper - confidence_95_lower,\n            'coefficient_of_variation': cv,\n            'tree_predictions': tree_predictions,\n            'ensemble_agreement': 1.0 /",
      "return {\n                'importance_variance_per_feature': importance_variance,\n                'cv_per_feature': cv_per_feature,\n                'high_variance_features': high_variance_features,\n                'low_variance_features': low_variance_features,\n                'mean_cv': np.mean",
      "return {\n                'randomness_level': randomness_level,\n                'diversity_score': diversity_score,\n                'usage_uniformity': usage_uniformity,\n                'overall_randomness_score':",
      "return {\n                'diversity_level': diversity_level,\n                'diversity_score': diversity_score,\n                'extreme_randomness_score': extreme_randomness_score,\n                'mean_correlation': mean_correlation,\n                'recommendations': recommendations,\n                'extra_trees_advantage': 'High' if diversity_score > 0.7 else 'Medium' if diversity_score > 0.5 else 'Low',\n                'optimal_range': 'Diversity score > 0.7 is excellent for Extra Trees'\n            }",
      "return {\n                'fast_convergence_ratio': fast_convergence_ratio,\n                'convergence_efficiency': convergence_efficiency,\n                'early_improvement_rate': early_improvement,\n                'late_improvement_rate': late_improvement,\n                'converges_fast': fast_convergence_ratio > 2.0,\n                'efficiency_score': convergence_efficiency,\n                'interpretation': 'Higher efficiency indicates faster convergence due to extreme randomness'\n            }",
      "return {\n                'converged': score_stability < 0.01,\n                'diminishing_returns_at': diminishing_point,\n                'final_score': final_score,\n                'max_score': max_score,\n                'convergence_ratio': convergence_ratio,\n                'score_stability': score_stability,\n                'optimal_trees': diminishing_point if diminishing_point else self.n_estimators,\n                'recommendation': self._get_convergence_recommendation",
      "return {'stability_score': 0.0}",
      "return {'stability_score': 0.0, 'error': 'Could not analyze stability'}",
      "return {\n                'final_gap': final_gap,\n                'converged': converged,\n                'data_efficiency': data_efficiency,\n                'best_val_score': np.max",
      "return {\n                'results': results,\n                'best_value': max",
      "return {\n                'optimal_randomness': best_result['max_features'],\n                'optimal_randomness_level': best_result['randomness_level'],\n                'best_performance': best_result['mean_score'],\n                'randomness_performance_correlation': correlation,\n                'interpretation': self._interpret_randomness_correlation",
      "return {\n                'quality_level': quality_level,\n                'consistency_score': consistency,\n                'mean_impurity_decrease': mean_decrease,\n                'interpretation': 'Higher consistency indicates stable random split benefits'\n            }",
      "return {\n                'efficiency_level': efficiency_level,\n                'efficiency_score': efficiency_score,\n                'complexity_variance': complexity_variance,\n                'interpretation': 'Higher scores indicate better tree structure from random splits'\n            }",
      "return {\n                'assessment': assessment,\n                'recommendation': recommendation,\n                'bias_dominance': bias_fraction > variance_fraction,\n                'variance_dominance': variance_fraction > bias_fraction,\n                'balance_score': 1.0 - abs",
      "return {\n                'stability_metrics': stability_metrics,\n                'stability_level': stability_level,\n                'interpretation': 'Higher robustness indicates interactions detectable despite random splits'\n            }",
      "return {'status': 'Insufficient data for Extra Trees convergence analysis'}",
      "return {'status': 'Error in Extra Trees convergence analysis'}",
      "return {'status': 'Insufficient data for convergence analysis'}",
      "return {'status': 'Error in convergence analysis'}",
      "return {'status': 'Error in Extra Trees learning analysis'}",
      "return {'status': 'Error in learning curve analysis'}",
      "return {'status': 'Insufficient data for randomness analysis'}",
      "return {'status': 'Error in randomness analysis'}",
      "return {\n            \"n_estimators\": n_estimators,\n            \"criterion\": criterion,\n            \"max_depth\": max_depth,\n            \"min_samples_split\": min_samples_split,\n            \"min_samples_leaf\": min_samples_leaf,\n            \"min_weight_fraction_leaf\": min_weight_fraction_leaf,\n            \"max_features\": max_features,\n            \"max_leaf_nodes\": max_leaf_nodes,\n            \"min_impurity_decrease\": min_impurity_decrease,\n            \"bootstrap\": bootstrap,\n            \"n_jobs\": n_jobs,\n            \"random_state\": random_state,\n            \"verbose\": verbose,\n            \"warm_start\": warm_start,\n            \"ccp_alpha\": ccp_alpha,\n            \"max_samples\": max_samples,\n            \"compute_feature_importance\": compute_feature_importance,\n            \"compute_permutation_importance\": compute_permutation_importance,\n            \"split_randomness_analysis\": split_randomness_analysis,\n            \"tree_diversity_analysis\": tree_diversity_analysis,\n            \"ensemble_convergence_analysis\": ensemble_convergence_analysis,\n            \"feature_interaction_analysis\": feature_interaction_analysis,\n            \"learning_curve_analysis\": learning_curve_analysis,\n            \"hyperparameter_sensitivity_analysis\": hyperparameter_sensitivity_analysis,\n            \"computational_efficiency_analysis\": computational_efficiency_analysis,\n            \"compare_with_random_forest\": compare_with_random_forest,\n            \"randomness_impact_analysis\": randomness_impact_analysis,\n            \"visualize_trees\": visualize_trees,\n            \"max_trees_to_visualize\": max_trees_to_visualize,\n            \"feature_importance_analysis\": True,\n            \"prediction_distribution_analysis\": True,\n            \"cross_validation_analysis\": cross_validation_analysis,\n            \"cv_folds\": cv_folds,\n            \"performance_benchmarking\": performance_benchmarking,\n            \"split_quality_analysis\": split_quality_analysis,\n            \"randomness_efficiency_analysis\": True,\n            \"bias_variance_analysis\": bias_variance_analysis\n        }",
      "return {'error': analysis['error']}",
      "return {\n                'feature_importance': feature_importance,\n                'top_features': analysis['top_features'],\n                'importance_analysis': analysis,\n                'ensemble_size': len",
      "return {\n            'feature_importance': feature_importance,\n            'top_features': [",
      "return {\n            \"feature_importance_analysis\": self.feature_importance_analysis_,\n            \"split_randomness_analysis\": self.split_randomness_analysis_,\n            \"tree_diversity_analysis\": self.tree_diversity_analysis_,\n            \"ensemble_convergence_analysis\": self.ensemble_convergence_analysis_,\n            \"feature_interaction_analysis\": self.feature_interaction_analysis_,\n            \"learning_curve_analysis\": self.learning_curve_analysis_,\n            \"hyperparameter_sensitivity_analysis\": self.hyperparameter_sensitivity_analysis_,\n            \"computational_efficiency_analysis\": self.computational_efficiency_analysis_,\n            \"random_forest_comparison\": self.random_forest_comparison_,\n            \"randomness_impact_analysis\": self.randomness_impact_analysis_,\n            \"cross_validation_analysis\": self.cross_validation_analysis_,\n            \"performance_benchmarking\": self.performance_benchmarking_,\n            \"split_quality_analysis\": self.split_quality_analysis_,\n            \"randomness_efficiency_analysis\": self.randomness_efficiency_analysis_,\n            \"bias_variance_analysis\": self.bias_variance_analysis_\n        }"
    ]
  },
  "gradient_boosting_classifier_plugin": {
    "score_methods": [],
    "analysis_methods": [
      "get_boosting_analysis",
      "plot_boosting_analysis"
    ],
    "metric_calculations": [],
    "result_dictionaries": []
  },
  "gradient_boosting_regressor_plugin": {
    "score_methods": [],
    "analysis_methods": [
      "get_boosting_analysis",
      "_analyze_feature_importance",
      "_analyze_importance_evolution",
      "_analyze_boosting_feature_selection",
      "_analyze_boosting_process",
      "_analyze_training_progression",
      "_analyze_sequential_improvement",
      "_analyze_boosting_convergence",
      "_analyze_early_stopping_point",
      "_analyze_estimator_utilization",
      "_analyze_learning_trajectory",
      "_analyze_prediction_evolution",
      "_analyze_learning_speed",
      "_analyze_prediction_convergence",
      "_analyze_residuals",
      "_analyze_residual_patterns",
      "_analyze_staged_residuals",
      "_analyze_heteroscedasticity"
    ],
    "metric_calculations": [],
    "result_dictionaries": [
      "return {\n            'predictions': final_predictions,\n            'staged_predictions': staged_array,\n            'prediction_std': prediction_std,\n            'prediction_range': prediction_range,\n            'uncertainty_score': uncertainty_score,\n            'convergence_measure': convergence_measure,\n            'confidence_95_lower': confidence_95_lower,\n            'confidence_95_upper': confidence_95_upper,\n            'prediction_interval_width': confidence_95_upper - confidence_95_lower,\n            'boosting_stability': 1.0 /",
      "return {\n                'feature_stability': feature_stability,\n                'overall_stability': overall_stability,\n                'stability_score': overall_stability,\n                'interpretation': 'Higher stability indicates consistent feature importance across boosting iterations'\n            }",
      "return {\n                'selection_scores': selection_scores,\n                'early_importance': early_importance,\n                'late_importance': late_importance,\n                'importance_gain': importance_gain,\n                'recommended_features': recommended_features,\n                'selection_threshold': selection_threshold,\n                'n_recommended': np.sum",
      "return {'error': 'No training scores available'}",
      "return {\n                'initial_score': initial_score,\n                'final_score': final_score,\n                'total_improvement': total_improvement,\n                'mean_improvement_per_iteration': mean_improvement,\n                'improvement_stability': std_improvement,\n                'early_improvement_rate': early_mean,\n                'late_improvement_rate': late_mean,\n                'learning_efficiency': early_mean /",
      "return {'error': 'Insufficient training scores for analysis'}",
      "return {\n                'converged': converged,\n                'cv': cv,\n                'trend_correlation': correlation,\n                'stability_score': 1.0 /",
      "return {'error': 'Insufficient validation scores'}",
      "return {\n                'optimal_n_estimators': best_val_idx + 1,\n                'best_validation_score': best_val_score,\n                'overfitting_detected': overfitting_start is not None,\n                'overfitting_starts_at': overfitting_start,\n                'final_generalization_gap': gaps[-1],\n                'gap_trend_slope': gap_trend,\n                'early_stopping_benefit': validation_scores[-1] - best_val_score\n            }",
      "return {\n                'train_convergence': train_convergence,\n                'validation_convergence': val_convergence,\n                'early_stopping_analysis': early_stopping_analysis,\n                'optimal_n_estimators': optimal_n_estimators,\n                'converged': train_convergence.get",
      "return {\n                'staged_residual_statistics': residual_stats,\n                'evolution_analysis': evolution_analysis,\n                'stages_analyzed': len",
      "return {\n            \"n_estimators\": n_estimators,\n            \"learning_rate\": learning_rate,\n            \"loss\": loss,\n            \"max_depth\": max_depth,\n            \"min_samples_split\": min_samples_split,\n            \"min_samples_leaf\": min_samples_leaf,\n            \"min_weight_fraction_leaf\": min_weight_fraction_leaf,\n            \"max_features\": max_features,\n            \"max_leaf_nodes\": max_leaf_nodes,\n            \"min_impurity_decrease\": min_impurity_decrease,\n            \"subsample\": subsample,\n            \"alpha\": alpha,\n            \"random_state\": random_state,\n            \"verbose\": verbose,\n            \"warm_start\": warm_start,\n            \"validation_fraction\": validation_fraction,\n            \"n_iter_no_change\": n_iter_no_change,\n            \"tol\": tol,\n            \"ccp_alpha\": ccp_alpha,\n            \"compute_feature_importance\": compute_feature_importance,\n            \"compute_permutation_importance\": compute_permutation_importance,\n            \"boosting_analysis\": boosting_analysis,\n            \"learning_trajectory_analysis\": learning_trajectory_analysis,\n            \"residual_analysis\": residual_analysis,\n            \"staged_prediction_analysis\": staged_prediction_analysis,\n            \"feature_interaction_analysis\": feature_interaction_analysis,\n            \"learning_curve_analysis\": learning_curve_analysis,\n            \"hyperparameter_sensitivity_analysis\": hyperparameter_sensitivity_analysis,\n            \"computational_efficiency_analysis\": computational_efficiency_analysis,\n            \"early_stopping_analysis\": early_stopping_analysis,\n            \"overfitting_analysis\": overfitting_analysis,\n            \"shrinkage_analysis\": shrinkage_analysis,\n            \"loss_function_analysis\": loss_function_analysis,\n            \"compare_with_random_forest\": compare_with_random_forest,\n            \"compare_with_linear_model\": True,\n            \"ensemble_evolution_analysis\": ensemble_evolution_analysis,\n            \"visualize_trees\": visualize_trees,\n            \"max_trees_to_visualize\": max_trees_to_visualize,\n            \"feature_importance_analysis\": True,\n            \"prediction_distribution_analysis\": True,\n            \"cross_validation_analysis\": cross_validation_analysis,\n            \"cv_folds\": cv_folds,\n            \"performance_benchmarking\": performance_benchmarking,\n            \"gradient_analysis\": gradient_analysis,\n            \"bias_variance_decomposition\": bias_variance_decomposition,\n            \"convergence_analysis\": convergence_analysis\n        }",
      "return {'error': analysis['error']}",
      "return {\n            'feature_importance': feature_importance,\n            'top_features': [",
      "return {\n            \"feature_importance_analysis\": self.feature_importance_analysis_,\n            \"boosting_analysis\": self.boosting_analysis_,\n            \"learning_trajectory_analysis\": self.learning_trajectory_analysis_,\n            \"residual_analysis\": self.residual_analysis_,\n            \"staged_prediction_analysis\": self.staged_prediction_analysis_,\n            \"feature_interaction_analysis\": self.feature_interaction_analysis_,\n            \"learning_curve_analysis\": self.learning_curve_analysis_,\n            \"hyperparameter_sensitivity_analysis\": self.hyperparameter_sensitivity_analysis_,\n            \"computational_efficiency_analysis\": self.computational_efficiency_analysis_,\n            \"early_stopping_analysis\": self.early_stopping_analysis_,\n            \"overfitting_analysis\": self.overfitting_analysis_,\n            \"shrinkage_analysis\": self.shrinkage_analysis_,\n            \"loss_function_analysis\": self.loss_function_analysis_,\n            \"random_forest_comparison\": self.random_forest_comparison_,\n            \"linear_model_comparison\": self.linear_model_comparison_,\n            \"ensemble_evolution_analysis\": self.ensemble_evolution_analysis_,\n            \"cross_validation_analysis\": self.cross_validation_analysis_,\n            \"performance_benchmarking\": self.performance_benchmarking_,\n            \"gradient_analysis\": self.gradient_analysis_,\n            \"bias_variance_decomposition\": self.bias_variance_decomposition_,\n            \"convergence_analysis\": self.convergence_analysis_\n        }"
    ]
  },
  "knn_classifier_plugin": {
    "score_methods": [],
    "analysis_methods": [
      "get_neighbor_analysis",
      "plot_neighbor_analysis",
      "_analyze_neighbor_structure"
    ],
    "metric_calculations": [],
    "result_dictionaries": [
      "return {\n            \"name\": self._name,\n            \"category\": self._category,\n            \"type\": self._algorithm_type,\n            \"description\": self._description,\n            \"paper_reference\": self._paper_reference,\n            \"framework\": \"scikit-learn\",\n            \"year_introduced\": 1951,\n            \"key_characteristics\": {\n                \"non_parametric\": \"Makes no assumptions about data distribution\",\n                \"lazy_learning\": \"No explicit training phase - stores all data\",\n                \"instance_based\": \"Classification based on similarity to stored instances\",\n                \"distance_dependent\": \"Relies on distance metrics in feature space\",\n                \"local_learning\": \"Decisions based on local neighborhood only\",\n                \"memory_based\": \"Requires storing entire training dataset\"\n            }",
      "return {\n            \"n_neighbors\": n_neighbors,\n            \"weights\": weights,\n            \"algorithm\": algorithm,\n            \"leaf_size\": leaf_size,\n            \"p\": p,\n            \"metric\": metric,\n            \"n_jobs\": n_jobs,\n            \"auto_scaling\": auto_scaling,\n            \"scaling_method\": scaling_method,\n            \"distance_threshold\": distance_threshold,\n            \"outlier_detection\": outlier_detection,\n            \"cross_validation_k\": cross_validation_k,\n            \"cv_folds\": cv_folds,\n            \"_ui_options\": {\n                \"show_k_validation\": cross_validation_k,\n                \"show_neighbor_analysis\": True,\n                \"show_decision_boundary\": True\n            }",
      "return {\n            \"n_features\": self.n_features_in_,\n            \"n_classes\": len"
    ]
  },
  "knn_regressor_plugin": {
    "score_methods": [
      "score",
      "analyze_performance"
    ],
    "analysis_methods": [
      "get_neighbor_analysis",
      "plot_neighbor_analysis",
      "_get_quick_analysis",
      "analyze_performance"
    ],
    "metric_calculations": [
      "compare_distance_metrics",
      "plot_distance_metric_comparison"
    ],
    "result_dictionaries": [
      "return {\n                'r2_score': float",
      "return {\n                \"n_neighbors\": self.core.n_neighbors,\n                \"weights\": self.core.weights,\n                \"algorithm\": self.core.algorithm,\n                \"metric\": self.core.metric,\n                \"p\": self.core.p,\n                \"auto_scale\": self.core.auto_scale,\n                \"random_state\": self.core.random_state,\n                # Strategy defaults\n                \"strategy_model_selection\": \"automatic_optimization\",\n                \"strategy_performance\": \"balanced_performance\",\n                \"strategy_analysis_depth\": \"standard_analysis\",\n                \"strategy_recommendations\": \"balanced_recommendations\",\n                \"strategy_deployment\": \"development_mode\",\n                \"enable_comprehensive_analysis\": True,\n                \"cv_folds\": 5,\n                \"k_range\":",
      "return {'error': 'Model must be trained before distance metric comparison'}",
      "return {\n            'n_neighbors': self.core.n_neighbors,\n            'weights': self.core.weights,\n            'algorithm': self.core.algorithm,\n            'metric': self.core.metric,\n            'p': self.core.p,\n            'auto_scale': self.core.auto_scale,\n            'random_state': self.core.random_state\n        }",
      "return {\n            'name': 'knn_regressor',\n            'display_name': 'K-Nearest Neighbors Regressor',\n            'version': '1.0.0',\n            'algorithm_type': 'Instance-based Learning',\n            'task_type': 'Regression',\n            'description': 'Advanced K-Nearest Neighbors regression with comprehensive K optimization and analysis',\n            'parameters': {\n                'n_neighbors': {'type': 'int', 'default': 5, 'description': 'Number of neighbors'}",
      "return {\n                    'success': True,\n                    'training_result': training_result,\n                    'model_summary': self._create_model_summary",
      "return {'error': 'Model must be trained before analysis'}",
      "return {'error': 'Model must be trained before K optimization analysis'}",
      "return {'error': 'Model must be trained before neighbor analysis'}",
      "return {\n                'recommendations': recommendations,\n                'analysis_source': 'comprehensive_analysis'\n            }"
    ]
  },
  "lasso_regression_plugin": {
    "score_methods": [],
    "analysis_methods": [
      "get_regularization_analysis",
      "plot_sparsity_analysis",
      "_analyze_regularization_path_detailed",
      "_analyze_feature_selection",
      "_analyze_sparsity",
      "_analyze_sparsity_vs_alpha",
      "_analyze_feature_stability"
    ],
    "metric_calculations": [],
    "result_dictionaries": [
      "return {\n            \"alpha\": alpha,\n            \"fit_intercept\": fit_intercept,\n            \"normalize_features\": normalize_features,\n            \"precompute\": precompute,\n            \"copy_X\": copy_X,\n            \"max_iter\": max_iter,\n            \"tol\": tol,\n            \"warm_start\": warm_start,\n            \"positive\": positive,\n            \"selection\": selection,\n            \"auto_alpha\": auto_alpha,\n            \"alpha_selection_method\": alpha_selection_method,\n            \"cv_folds\": cv_folds,\n            \"n_alphas\": n_alphas,\n            \"alpha_min_ratio\": alpha_min_ratio,\n            \"analyze_regularization_path\": analyze_regularization_path,\n            \"analyze_feature_stability\": analyze_feature_stability,\n            \"compute_feature_importance\": compute_feature_importance,\n            \"sparsity_analysis\": sparsity_analysis,\n            \"random_state\": random_state\n        }",
      "return {\n            \"algorithm\": \"Lasso Regression\",\n            \"n_features\": self.n_features_in_,\n            \"feature_names\": self.feature_names_,\n            \"alpha_used\": self.alpha_used_,\n            \"alpha_selection_method\": self.alpha_selection_method if self.auto_alpha else \"manual\",\n            \"selected_features\": selected_features,\n            \"eliminated_features\": self.n_features_in_ - selected_features,\n            \"sparsity_ratio\":"
    ]
  },
  "lightbgm_classifier_plugin": {
    "score_methods": [],
    "analysis_methods": [
      "get_lgb_analysis",
      "plot_lgb_analysis"
    ],
    "metric_calculations": [],
    "result_dictionaries": [
      "return {\n            \"boosting_type\": boosting_type,\n            \"objective\": 'multiclass',  # Will be set automatically\n            \"num_class\": None,  # Will be set automatically\n            \"metric\": 'multi_logloss',  # Will be adjusted for binary\n            \"num_leaves\": num_leaves,\n            \"max_depth\": max_depth,\n            \"learning_rate\": learning_rate,\n            \"n_estimators\": n_estimators,\n            \"subsample_for_bin\": 200000,\n            \"min_split_gain\": min_split_gain,\n            \"min_child_weight\": min_child_weight,\n            \"min_child_samples\": min_child_samples,\n            \"subsample\": subsample,\n            \"subsample_freq\": subsample_freq,\n            \"colsample_bytree\": colsample_bytree,\n            \"reg_alpha\": reg_alpha,\n            \"reg_lambda\": reg_lambda,\n            \"random_state\": random_state,\n            \"n_jobs\": -1,\n            \"silent\": 'warn',\n            \"importance_type\": importance_type,\n            \"max_bin\": max_bin,\n            \"min_data_in_bin\": 3,\n            \"feature_fraction\": colsample_bytree,\n            \"feature_fraction_bynode\": 1.0,\n            \"bagging_fraction\": subsample,\n            \"bagging_freq\": subsample_freq,\n            \"lambda_l1\": reg_alpha,\n            \"lambda_l2\": reg_lambda,\n            \"min_gain_to_split\": min_split_gain,\n            \"drop_rate\": drop_rate,\n            \"max_drop\": max_drop,\n            \"skip_drop\": skip_drop,\n            \"xgboost_dart_mode\": False,\n            \"uniform_drop\": False,\n            \"top_rate\": top_rate,\n            \"other_rate\": other_rate,\n            \"min_data_per_group\": 100,\n            \"max_cat_threshold\": 32,\n            \"cat_l2\": 10.0,\n            \"cat_smooth\": 10.0,\n            \"max_cat_to_onehot\": max_cat_to_onehot,\n            \"cegb_tradeoff\": 1.0,\n            \"cegb_penalty_split\": 0.0,\n            \"path_smooth\": 0.0,\n            \"early_stopping_rounds\": early_stopping_rounds,\n            \"feature_pre_filter\": feature_pre_filter,\n            \"linear_tree\": linear_tree,\n            \"monotone_constraints\": None,\n            \"monotone_constraints_method\": 'basic',\n            \"monotone_penalty\": 0.0,\n            \"interaction_constraints\": None,\n            \"verbosity\": -1,\n            \"seed\": random_state,\n            \"deterministic\": False\n        }"
    ]
  },
  "lightgbm_regressor_plugin": {
    "score_methods": [
      "_profile_performance"
    ],
    "analysis_methods": [
      "get_analysis_results",
      "_analyze_feature_importance",
      "_analyze_lightgbm_specifics",
      "_analyze_early_stopping",
      "_analyze_training_progression_lgb",
      "_analyze_convergence",
      "_analyze_regularization_effects",
      "_analyze_cross_validation",
      "_analyze_tree_structure",
      "_analyze_prediction_uncertainty",
      "_analyze_categorical_features",
      "_analyze_hyperparameter_sensitivity"
    ],
    "metric_calculations": [],
    "result_dictionaries": [
      "return {\n            'predictions': final_predictions,\n            'prediction_std': prediction_std,\n            'prediction_range': prediction_range,\n            'uncertainty_score': uncertainty_score,\n            'confidence_95_lower': confidence_95_lower,\n            'confidence_95_upper': confidence_95_upper,\n            'prediction_interval_width': confidence_95_upper - confidence_95_lower,\n            'boosting_stability': 1.0 /",
      "return {\n            'current_value': current_lr,\n            'sensitivity_score': sensitivity,\n            'recommendation': recommendation\n        }",
      "return {\n            'current_value': current_leaves,\n            'sensitivity_score': sensitivity,\n            'recommendation': recommendation\n        }",
      "return {\n            'current_value': total_reg,\n            'sensitivity_score': sensitivity,\n            'recommendation': recommendation\n        }",
      "return {\n            'current_value': total_sampling,\n            'sensitivity_score': sensitivity,\n            'recommendation': recommendation\n        }",
      "return {\n            'predictions': predictions,\n            'lower_bound': lower,\n            'upper_bound': upper,\n            'interval_width': upper - lower,\n            'confidence_level': confidence_level,\n            'uncertainty_score': uncertainty_results['uncertainty_score']\n        }",
      "return {\n            \"n_estimators\": n_estimators,\n            \"learning_rate\": learning_rate,\n            \"num_leaves\": num_leaves,\n            \"max_depth\": max_depth,\n            \"min_child_samples\": min_child_samples,\n            \"min_child_weight\": min_child_weight,\n            \"min_split_gain\": min_split_gain,\n            \"subsample\": subsample,\n            \"subsample_freq\": subsample_freq,\n            \"colsample_bytree\": colsample_bytree,\n            \"reg_alpha\": reg_alpha,\n            \"reg_lambda\": reg_lambda,\n            \"min_gain_to_split\": min_gain_to_split,\n            \"boosting_type\": boosting_type,\n            \"objective\": objective,\n            \"metric\": metric,\n            \"num_threads\": num_threads,\n            \"device_type\": device_type,\n            \"max_bin\": max_bin,\n            \"feature_fraction\": feature_fraction,\n            \"feature_fraction_bynode\": feature_fraction_bynode,\n            \"extra_trees\": extra_trees,\n            \"random_state\": random_state,\n            \"verbose\": verbose,\n            \"early_stopping_rounds\": early_stopping_rounds,\n            \"validation_fraction\": validation_fraction,\n            \"dart_rate_drop\": dart_rate_drop,\n            \"max_drop\": max_drop,\n            \"skip_drop\": skip_drop,\n            \"uniform_drop\": uniform_drop,\n            \"max_cat_threshold\": max_cat_threshold,\n            \"cat_l2\": cat_l2,\n            \"cat_smooth\": cat_smooth,\n            \"compute_feature_importance\": compute_feature_importance,\n            \"compute_permutation_importance\": compute_permutation_importance,\n            \"lightgbm_analysis\": lightgbm_analysis,\n            \"early_stopping_analysis\": early_stopping_analysis,\n            \"convergence_analysis\": convergence_analysis,\n            \"regularization_analysis\": regularization_analysis,\n            \"cross_validation_analysis\": cross_validation_analysis,\n            \"tree_analysis\": tree_analysis,\n            \"prediction_uncertainty_analysis\": prediction_uncertainty_analysis,\n            \"hyperparameter_sensitivity_analysis\": hyperparameter_sensitivity_analysis,\n            \"categorical_analysis\": categorical_analysis,\n            \"performance_profiling\": performance_profiling,\n            \"cv_folds\": cv_folds,\n            \"compare_with_xgboost\": compare_with_xgboost,\n            \"compare_with_sklearn_gbm\": compare_with_sklearn_gbm,\n            \"plot_importance\": plot_importance,\n            \"plot_trees\": plot_trees,\n            \"max_trees_to_plot\": max_trees_to_plot,\n            \"plot_metric_evolution\": plot_metric_evolution,\n            \"monitor_training\": True,\n            \"feature_interaction_analysis\": True\n        }",
      "return {\"status\": \"Model not fitted - no analysis available\"}"
    ]
  },
  "linear_regression_plugin": {
    "score_methods": [],
    "analysis_methods": [
      "_perform_statistical_analysis",
      "_analyze_outliers_and_influence",
      "_analyze_residuals"
    ],
    "metric_calculations": [],
    "result_dictionaries": [
      "return {\n                'score': None,\n                'interpretation': 'Could not assess assumptions',\n                'recommendation': 'Manually check assumption plots'\n            }",
      "return {\n            'score': score,\n            'met_assumptions': met_count,\n            'total_testable': total_count,\n            'interpretation': interpretation,\n            'recommendation': recommendation\n        }",
      "return {\n            \"n_features\": self.n_features_in_,\n            \"feature_names\": self.feature_names_,\n            \"processed_features\": len",
      "return {\"status\": \"Statistical analysis not performed\"}"
    ]
  },
  "linear_svm_plugin": {
    "score_methods": [],
    "analysis_methods": [],
    "metric_calculations": [],
    "result_dictionaries": [
      "return {\n            \"name\": self._name,\n            \"category\": self._category,\n            \"type\": self._algorithm_type,\n            \"description\": self._description,\n            \"paper_reference\": self._paper_reference,\n            \"strengths\": [\n                \"Excellent for high-dimensional data\",\n                \"Fast training and prediction\",\n                \"Memory efficient\",\n                \"Good generalization\",\n                \"Robust to overfitting\",\n                \"Handles sparse data well\"\n            ],\n            \"weaknesses\": [\n                \"Assumes linear separability\",\n                \"Sensitive to feature scaling\",\n                \"No probability estimates\",\n                \"Limited with non-linear patterns\"\n            ],\n            \"use_cases\": [\n                \"Text classification\",\n                \"Gene expression analysis\",\n                \"High-dimensional sparse data\",\n                \"Large datasets with many features\",\n                \"When interpretability is important\"\n            ],\n            \"complexity\": {\n                \"training\": \"O"
    ]
  },
  "mlp_classifier_plugin": {
    "score_methods": [],
    "analysis_methods": [
      "get_neural_network_analysis",
      "plot_training_analysis",
      "_analyze_training",
      "_analyze_convergence",
      "_analyze_architecture"
    ],
    "metric_calculations": [],
    "result_dictionaries": [
      "return {\n            \"hidden_layer_sizes\": hidden_layer_sizes,\n            \"activation\": activation,\n            \"solver\": solver,\n            \"alpha\": alpha,\n            \"batch_size\": batch_size,\n            \"learning_rate\": learning_rate,\n            \"learning_rate_init\": learning_rate_init,\n            \"max_iter\": max_iter,\n            \"shuffle\": shuffle,\n            \"random_state\": random_state,\n            \"tol\": tol,\n            \"early_stopping\": early_stopping,\n            \"validation_fraction\": validation_fraction,\n            \"beta_1\": beta_1,\n            \"beta_2\": beta_2,\n            \"epsilon\": epsilon,\n            \"n_iter_no_change\": n_iter_no_change,\n            \"momentum\": momentum,\n            \"nesterovs_momentum\": nesterovs_momentum,\n            \"auto_scaling\": auto_scaling,\n            \"scaling_method\": scaling_method,\n            \"architecture_optimization\": architecture_optimization,\n            \"warm_start\": warm_start,\n            \"verbose\": verbose,\n            \"_ui_options\": {\n                \"compute_learning_curve\": compute_learning_curve,\n                \"show_training_analysis\": True,\n                \"show_architecture_viz\": True,\n                \"show_decision_boundary\": True\n            }",
      "return {\n            \"n_features\": self.n_features_in_,\n            \"n_classes\": len"
    ]
  },
  "mlp_regressor_plugin": {
    "score_methods": [
      "score"
    ],
    "analysis_methods": [
      "_run_comprehensive_analysis"
    ],
    "metric_calculations": [],
    "result_dictionaries": [
      "return {\n                'r2_score': float",
      "return {\n                \"hidden_layer_sizes\": self.config['hidden_layer_sizes'],\n                \"activation\": self.config['activation'],\n                \"solver\": self.config['solver'],\n                \"alpha\": self.config['alpha'],\n                \"learning_rate_init\": self.config['learning_rate_init'],\n                \"max_iter\": self.config['max_iter'],\n                \"random_state\": self.config['random_state'],\n                \"enable_analysis\": self.config['enable_analysis'],\n                \"enable_display\": self.config['enable_display'],\n                # Strategy defaults\n                \"strategy_profile\": \"balanced\",\n                \"training_strategy\": \"standard\",\n                \"performance_target\": \"balanced\",\n                \"deployment_target\": \"development\"\n            }",
      "return {\n            'name': 'mlp_regressor',\n            'display_name': 'Multi-layer Perceptron Regressor',\n            'version': '2.0',\n            'algorithm_type': 'Neural Network',\n            'task_type': 'Regression',\n            'description': 'Advanced Multi-layer Perceptron regression with comprehensive analysis and optimization',\n            'parameters': {\n                'hidden_layer_sizes': {'type': 'tuple', 'default':",
      "return {\n            'hidden_layer_sizes': self.config['hidden_layer_sizes'],\n            'activation': self.config['activation'],\n            'solver': self.config['solver'],\n            'alpha': self.config['alpha'],\n            'learning_rate_init': self.config['learning_rate_init'],\n            'max_iter': self.config['max_iter'],\n            'random_state': self.config['random_state'],\n            'enable_analysis': self.config['enable_analysis'],\n            'enable_display': self.config['enable_display']\n        }"
    ]
  },
  "multiclass_svm_plugin": {
    "score_methods": [
      "_analyze_kernel_performance"
    ],
    "analysis_methods": [
      "_analyze_kernel_performance",
      "_analyze_class_characteristics"
    ],
    "metric_calculations": [],
    "result_dictionaries": [
      "return {\n            \"n_features\": self.n_features_in_,\n            \"n_classes\": self.n_classes_,\n            \"classes\": self.classes_.tolist",
      "return {\n            \"algorithm\": \"Multi-class SVM\",\n            \"kernel_type\": self.kernel,\n            \"multi_class_strategy\": self.decision_function_shape,\n            \"training_completed\": True,\n            \"svm_characteristics\": {\n                \"kernel_method\": True,\n                \"maximum_margin\": True,\n                \"support_vector_based\": True,\n                \"non_parametric\": self.kernel != 'linear',\n                \"probability_support\": self.probability,\n                \"handles_non_linearity\": self.kernel != 'linear'\n            }"
    ]
  },
  "multinomial_logistic_regression_plugin": {
    "score_methods": [],
    "analysis_methods": [
      "get_multinomial_analysis",
      "_analyze_multinomial_model"
    ],
    "metric_calculations": [],
    "result_dictionaries": []
  },
  "naive_bayes_bernoulli_plugin": {
    "score_methods": [],
    "analysis_methods": [
      "get_class_feature_analysis",
      "get_vocabulary_analysis",
      "plot_class_feature_analysis"
    ],
    "metric_calculations": [],
    "result_dictionaries": [
      "return {\n            \"feature_names\": [self.feature_names_[i] for i in top_indices],\n            \"importance_scores\": importance_scores[top_indices],\n            \"feature_indices\": top_indices,\n            \"total_features\": len",
      "return {\n            \"alpha\": alpha,\n            \"fit_prior\": fit_prior,\n            \"vectorization_method\": vectorization_method,\n            \"max_features\": max_features,\n            \"ngram_range\": ngram_range,\n            \"min_df\": min_df,\n            \"max_df\": max_df,\n            \"stop_words\": stop_words,\n            \"lowercase\": lowercase,\n            \"feature_selection\": feature_selection,\n            \"n_features_to_select\": n_features_to_select,\n            \"smoothing_method\": smoothing_method,\n            \"feature_log_prob_thresholding\": feature_log_prob_thresholding,\n            \"log_prob_threshold\": log_prob_threshold,\n            \"validate_input\": validate_input,\n            \"zero_feature_handling\": zero_feature_handling,\n            \"_ui_options\": {\n                \"show_feature_importance\": show_feature_importance,\n                \"show_class_analysis\": show_class_analysis,\n                \"show_vocabulary_analysis\": show_vocabulary_analysis,\n                \"show_probability_analysis\": show_probability_analysis\n            }"
    ]
  },
  "naive_bayes_gaussian_plugin": {
    "score_methods": [],
    "analysis_methods": [
      "get_model_analysis",
      "plot_model_analysis",
      "_analyze_model_assumptions"
    ],
    "metric_calculations": [],
    "result_dictionaries": [
      "return {\n            \"var_smoothing\": var_smoothing,\n            \"priors\": priors,\n            \"feature_independence_test\": feature_independence_test,\n            \"normality_test\": normality_test,\n            \"class_balance_analysis\": class_balance_analysis,\n            \"outlier_detection\": outlier_detection,\n            \"outlier_threshold\": outlier_threshold,\n            \"probability_calibration\": probability_calibration,\n            \"calibration_method\": calibration_method,\n            \"cv_folds\": cv_folds,\n            \"auto_scaling\": auto_scaling,\n            \"scaling_method\": scaling_method,\n            \"_ui_options\": {\n                \"show_model_analysis\": True,\n                \"show_feature_distributions\": True,\n                \"show_assumption_tests\": feature_independence_test or normality_test,\n                \"analyze_assumptions\": True\n            }"
    ]
  },
  "naive_bayes_multinomial_plugin": {
    "score_methods": [],
    "analysis_methods": [
      "get_class_feature_analysis",
      "get_vocabulary_analysis",
      "plot_class_feature_analysis"
    ],
    "metric_calculations": [],
    "result_dictionaries": [
      "return {\n            \"feature_names\": [self.feature_names_[i] for i in top_indices],\n            \"importance_scores\": importance_scores[top_indices],\n            \"feature_indices\": top_indices,\n            \"total_features\": len",
      "return {\n            \"alpha\": alpha,\n            \"fit_prior\": fit_prior,\n            \"vectorization_method\": vectorization_method,\n            \"max_features\": max_features,\n            \"ngram_range\": ngram_range,\n            \"min_df\": min_df,\n            \"max_df\": max_df,\n            \"stop_words\": stop_words,\n            \"lowercase\": lowercase,\n            \"feature_selection\": feature_selection,\n            \"n_features_to_select\": n_features_to_select,\n            \"smoothing_method\": smoothing_method,\n            \"feature_log_prob_thresholding\": feature_log_prob_thresholding,\n            \"log_prob_threshold\": log_prob_threshold,\n            \"validate_input\": validate_input,\n            \"zero_feature_handling\": zero_feature_handling,\n            \"_ui_options\": {\n                \"show_feature_importance\": show_feature_importance,\n                \"show_class_analysis\": show_class_analysis,\n                \"show_vocabulary_analysis\": show_vocabulary_analysis,\n                \"show_probability_analysis\": show_probability_analysis\n            }"
    ]
  },
  "one_vs_one_classifier_plugin": {
    "score_methods": [
      "_estimate_pairwise_performance"
    ],
    "analysis_methods": [
      "get_ovo_analysis"
    ],
    "metric_calculations": [],
    "result_dictionaries": []
  },
  "one_vs_rest_classifier_plugin": {
    "score_methods": [
      "_evaluate_class_performance"
    ],
    "analysis_methods": [
      "get_ovr_analysis",
      "plot_ovr_analysis",
      "_analyze_ovr_strategy"
    ],
    "metric_calculations": [],
    "result_dictionaries": [
      "return {\n            \"base_estimator\": base_estimator,\n            \"auto_scale_features\": auto_scale_features,\n            \"class_weight_strategy\": class_weight_strategy,\n            \"probability_calibration\": probability_calibration,\n            \"estimate_class_performance\": estimate_class_performance,\n            \"n_jobs\": n_jobs,\n            \"verbose\": verbose,\n            \"random_state\": random_state,\n            \n            # Base estimator hyperparameters\n            \"lr_C\": lr_C,\n            \"lr_max_iter\": lr_max_iter,\n            \"lr_solver\": lr_solver,\n            \"lr_penalty\": lr_penalty,\n            \"rf_n_estimators\": rf_n_estimators,\n            \"rf_max_depth\": rf_max_depth,\n            \"rf_min_samples_split\": rf_min_samples_split,\n            \"rf_min_samples_leaf\": rf_min_samples_leaf,\n            \"rf_criterion\": rf_criterion,\n            \"svm_C\": svm_C,\n            \"svm_kernel\": svm_kernel,\n            \"svm_probability\": svm_probability,\n            \"svm_gamma\": svm_gamma,\n            \"dt_max_depth\": dt_max_depth,\n            \"dt_min_samples_split\": dt_min_samples_split,\n            \"dt_min_samples_leaf\": dt_min_samples_leaf,\n            \"dt_criterion\": dt_criterion,\n            \"knn_n_neighbors\": knn_n_neighbors,\n            \"knn_weights\": knn_weights,\n            \"knn_metric\": knn_metric,\n            \"gb_n_estimators\": gb_n_estimators,\n            \"gb_learning_rate\": gb_learning_rate,\n            \"gb_max_depth\": gb_max_depth,\n            \"gb_subsample\": gb_subsample,\n            \"mlp_hidden_layer_sizes\": mlp_hidden_layer_sizes,\n            \"mlp_activation\": mlp_activation,\n            \"mlp_max_iter\": mlp_max_iter,\n            \"mlp_alpha\": mlp_alpha,\n            \"xgb_n_estimators\": xgb_n_estimators,\n            \"xgb_learning_rate\": xgb_learning_rate,\n            \"xgb_max_depth\": xgb_max_depth,\n            \"xgb_subsample\": xgb_subsample\n        }",
      "return {\n            \"name\": self._name,\n            \"category\": self._category,\n            \"type\": self._algorithm_type,\n            \"description\": self._description,\n            \"paper_reference\": self._paper_reference,\n            \"year_introduced\": 1995,\n            \"key_innovations\": {\n                \"binary_decomposition\": \"Decomposes multi-class into multiple binary problems\",\n                \"universal_wrapper\": \"Works with any binary classifier\",\n                \"independent_training\": \"Each binary classifier trained independently\",\n                \"per_class_analysis\": \"Enables detailed analysis of each class separately\",\n                \"parallel_scalability\": \"Binary classifiers can be trained in parallel\",\n                \"interpretability_preservation\": \"Maintains interpretability of base classifier\"\n            }"
    ]
  },
  "polynomial_regression_plugin": {
    "score_methods": [],
    "analysis_methods": [
      "get_polynomial_analysis",
      "plot_polynomial_analysis",
      "_analyze_polynomial_terms_comprehensive",
      "_analyze_overfitting",
      "_analyze_model_complexity",
      "_analyze_feature_importance",
      "_analyze_importance_by_term_type",
      "_analyze_polynomial_contribution",
      "_analyze_bias_variance",
      "_analyze_curvature",
      "_analyze_1d_curvature",
      "_analyze_2d_curvature",
      "_analyze_degree_contribution"
    ],
    "metric_calculations": [],
    "result_dictionaries": [
      "return {\n            \"degree\": degree,\n            \"include_bias\": include_bias,\n            \"interaction_only\": interaction_only,\n            \"normalize_features\": normalize_features,\n            \"use_regularization\": use_regularization,\n            \"alpha\": alpha,\n            \"auto_alpha\": auto_alpha,\n            \"auto_degree\": auto_degree,\n            \"max_degree\": max_degree,\n            \"degree_selection_method\": degree_selection_method,\n            \"overfitting_threshold\": overfitting_threshold,\n            \"cv_folds\": cv_folds,\n            \"feature_selection\": feature_selection,\n            \"feature_selection_threshold\": feature_selection_threshold,\n            \"remove_low_variance\": remove_low_variance,\n            \"variance_threshold\": variance_threshold,\n            \"analyze_polynomial_terms\": analyze_polynomial_terms,\n            \"detect_overfitting\": detect_overfitting,\n            \"compute_feature_importance\": compute_feature_importance,\n            \"bias_variance_analysis\": bias_variance_analysis,\n            \"curvature_analysis\": curvature_analysis,\n            \"random_state\": random_state\n        }",
      "return {\n            \"degree_analysis\": self.degree_analysis_,\n            \"polynomial_analysis\": self.polynomial_analysis_,\n            \"overfitting_analysis\": self.overfitting_analysis_,\n            \"feature_importance_analysis\": self.feature_importance_analysis_,\n            \"bias_variance_analysis\": self.bias_variance_analysis_,\n            \"curvature_analysis\": self.curvature_analysis_\n        }"
    ]
  },
  "radius_neighbors_classifier_plugin": {
    "score_methods": [
      "_analyze_radius_effectiveness",
      "_assess_radius_effectiveness"
    ],
    "analysis_methods": [
      "get_radius_analysis",
      "plot_radius_analysis",
      "_analyze_data_density",
      "_analyze_radius_effectiveness"
    ],
    "metric_calculations": [],
    "result_dictionaries": [
      "return {\n            \"radius\": radius,\n            \"weights\": weights,\n            \"algorithm\": algorithm,\n            \"leaf_size\": leaf_size,\n            \"p\": p,\n            \"metric\": metric,\n            \"outlier_label\": outlier_label,\n            \"n_jobs\": n_jobs,\n            \"auto_scaling\": auto_scaling,\n            \"scaling_method\": scaling_method,\n            \"auto_radius_estimation\": auto_radius_estimation,\n            \"radius_estimation_method\": radius_estimation_method,\n            \"outlier_detection\": outlier_detection,\n            \"min_neighbors_threshold\": min_neighbors_threshold,\n            \"adaptive_radius\": adaptive_radius,\n            \"density_analysis\": density_analysis,\n            \"_ui_options\": {\n                \"show_radius_analysis\": density_analysis,\n                \"show_radius_sensitivity\": True,\n                \"show_outlier_analysis\": outlier_detection\n            }",
      "return {\n            \"n_features\": self.n_features_in_,\n            \"n_classes\": len"
    ]
  },
  "radius_neighbors_regressor_plugin": {
    "score_methods": [
      "score",
      "analyze_performance",
      "plot_performance_comparison"
    ],
    "analysis_methods": [
      "_get_quick_analysis",
      "analyze_performance"
    ],
    "metric_calculations": [],
    "result_dictionaries": [
      "return {\n                'r2_score': float",
      "return {\n                'quick_cv_score': cv_result.get",
      "return {\n                \"radius\": self.core.radius,\n                \"weights\": self.core.weights,\n                \"algorithm\": self.core.algorithm,\n                \"metric\": self.core.metric,\n                \"p\": self.core.p,\n                \"auto_scale\": self.core.auto_scale,\n                \"adaptive_radius\": self.core.adaptive_radius,\n                \"random_state\": self.core.random_state,\n                # Basic defaults for advanced options\n                \"enable_comprehensive_analysis\": True,\n                \"cv_folds\": 5,\n                \"enable_interactive_plots\": True,\n                \"report_format\": \"html\"\n            }",
      "return {\n                'knn_comparison': self.analysis.compare_with_knn",
      "return {\n            'radius': self.core.radius,\n            'weights': self.core.weights,\n            'algorithm': self.core.algorithm,\n            'metric': self.core.metric,\n            'p': self.core.p,\n            'auto_scale': self.core.auto_scale,\n            'adaptive_radius': self.core.adaptive_radius,\n            'effective_radius': getattr",
      "return {\n            'algorithm': 'Radius Neighbors Regressor',\n            'n_samples': self.core.n_samples_in_,\n            'n_features': self.core.n_features_in_,\n            'effective_radius': self.core.effective_radius_,\n            'scaling_applied': self.core.scaler_ is not None,\n            'adaptive_radius_enabled': self.core.adaptive_radius,\n            'distance_metric': self.core.metric,\n            'weight_function': self.core.weights\n        }",
      "return {\n            'name': 'radius_neighbors_regressor',\n            'display_name': 'Radius Neighbors Regressor',\n            'version': '1.0.0',\n            'algorithm_type': 'Instance-based Learning',\n            'task_type': 'Regression',\n            'description': 'Advanced radius-based nearest neighbors regression with comprehensive analysis',\n            'parameters': {\n                'radius': {'type': 'float', 'default': 1.0, 'description': 'Neighborhood radius'}",
      "return {\n                    'success': True,\n                    'training_result': training_result,\n                    'model_summary': self._create_model_summary",
      "return {'error': 'Model must be trained before analysis'}",
      "return {'error': 'Model must be trained before feature importance analysis'}",
      "return {\n                'recommendations': recommendations,\n                'analysis_source': 'comprehensive_analysis'\n            }",
      "return {\n        'name': 'radius_neighbors_regressor',\n        'display_name': 'Radius Neighbors Regressor',\n        'version': '1.0.0',\n        'algorithm_type': 'Instance-based Learning',\n        'task_type': 'Regression',\n        'description': 'Advanced radius-based nearest neighbors regression with comprehensive analysis',\n        'parameters': {\n            'radius': {'type': 'float', 'default': 1.0, 'description': 'Neighborhood radius'}"
    ]
  },
  "random_forest_classifier_plugin": {
    "score_methods": [
      "get_oob_score"
    ],
    "analysis_methods": [
      "analyze_tree_diversity"
    ],
    "metric_calculations": [],
    "result_dictionaries": [
      "return {\n            \"n_estimators\": n_estimators,\n            \"criterion\": criterion,\n            \"max_depth\": max_depth,\n            \"min_samples_split\": min_samples_split,\n            \"min_samples_leaf\": min_samples_leaf,\n            \"min_weight_fraction_leaf\": 0.0,\n            \"max_features\": max_features,\n            \"max_leaf_nodes\": None,\n            \"min_impurity_decrease\": min_impurity_decrease,\n            \"bootstrap\": bootstrap,\n            \"oob_score\": oob_score,\n            \"n_jobs\": -1,  # Use all cores for better performance\n            \"random_state\": random_state,\n            \"verbose\": 0,\n            \"warm_start\": False,\n            \"class_weight\": class_weight,\n            \"ccp_alpha\": ccp_alpha,\n            \"max_samples\": max_samples\n        }",
      "return {\n            'n_estimators': self.n_estimators,\n            'criterion': self.criterion,\n            'max_depth': self.max_depth,\n            'min_samples_split': self.min_samples_split,\n            'min_samples_leaf': self.min_samples_leaf,\n            'max_features': self.max_features,\n            'bootstrap': self.bootstrap,\n            'oob_score': self.oob_score,\n            'random_state': self.random_state,\n            'class_weight': self.class_weight,\n            'ccp_alpha': self.ccp_alpha,\n            'max_samples': self.max_samples\n        }",
      "return {\n            \"name\": self._name,\n            \"category\": self._category,\n            \"type\": self._algorithm_type,\n            \"description\": self._description,\n            \"paper_reference\": self._paper_reference,\n            \"ensemble_type\": \"Bagging"
    ]
  },
  "random_forest_regressor_plugin": {
    "score_methods": [
      "_analyze_oob_performance",
      "_assess_oob_performance",
      "_analyze_performance_benchmarks",
      "_rank_performance"
    ],
    "analysis_methods": [
      "get_ensemble_analysis",
      "plot_ensemble_analysis",
      "_analyze_feature_importance",
      "_analyze_oob_performance",
      "_analyze_tree_diversity",
      "_analyze_ensemble_convergence",
      "_analyze_convergence_pattern",
      "_analyze_feature_interactions",
      "_analyze_learning_curves",
      "_analyze_learning_characteristics",
      "_analyze_hyperparameter_sensitivity",
      "_analyze_ensemble_composition",
      "_analyze_cross_validation",
      "_analyze_performance_benchmarks"
    ],
    "metric_calculations": [],
    "result_dictionaries": [
      "return {\n            'predictions': mean_predictions,\n            'std_predictions': std_predictions,\n            'confidence_95_lower': confidence_95_lower,\n            'confidence_95_upper': confidence_95_upper,\n            'prediction_interval_width': confidence_95_upper - confidence_95_lower,\n            'coefficient_of_variation': cv,\n            'tree_predictions': tree_predictions,\n            'ensemble_agreement': 1.0 /",
      "return {\n                'overall_assessment': overall,\n                'overfitting_assessment': overfitting,\n                'oob_r2': oob_r2,\n                'r2_gap': r2_gap,\n                'generalization_score': max",
      "return {\n                'diversity_level': diversity_level,\n                'diversity_score': diversity_score,\n                'mean_correlation': mean_correlation,\n                'recommendations': recommendations,\n                'optimal_range': 'Diversity score between 0.4-0.7 is typically optimal'\n            }",
      "return {\n                'converged': score_stability < 0.01,\n                'diminishing_returns_at': diminishing_point,\n                'final_score': final_score,\n                'max_score': max_score,\n                'convergence_ratio': convergence_ratio,\n                'score_stability': score_stability,\n                'optimal_trees': diminishing_point if diminishing_point else self.n_estimators,\n                'recommendation': self._get_convergence_recommendation",
      "return {\n                'final_gap': final_gap,\n                'converged': converged,\n                'data_efficiency': data_efficiency,\n                'best_val_score': np.max",
      "return {\n                'results': results,\n                'best_value': max",
      "return {\n            \"n_estimators\": n_estimators,\n            \"criterion\": criterion,\n            \"max_depth\": max_depth,\n            \"min_samples_split\": min_samples_split,\n            \"min_samples_leaf\": min_samples_leaf,\n            \"min_weight_fraction_leaf\": min_weight_fraction_leaf,\n            \"max_features\": max_features,\n            \"max_leaf_nodes\": max_leaf_nodes,\n            \"min_impurity_decrease\": min_impurity_decrease,\n            \"bootstrap\": bootstrap,\n            \"oob_score\": oob_score,\n            \"n_jobs\": n_jobs,\n            \"random_state\": random_state,\n            \"verbose\": 0,\n            \"warm_start\": warm_start,\n            \"ccp_alpha\": ccp_alpha,\n            \"max_samples\": max_samples,\n            \"compute_feature_importance\": compute_feature_importance,\n            \"compute_permutation_importance\": compute_permutation_importance,\n            \"compute_oob_analysis\": compute_oob_analysis,\n            \"tree_diversity_analysis\": tree_diversity_analysis,\n            \"ensemble_convergence_analysis\": ensemble_convergence_analysis,\n            \"feature_interaction_analysis\": feature_interaction_analysis,\n            \"learning_curve_analysis\": learning_curve_analysis,\n            \"hyperparameter_sensitivity_analysis\": hyperparameter_sensitivity_analysis,\n            \"ensemble_composition_analysis\": ensemble_composition_analysis,\n            \"visualize_trees\": visualize_trees,\n            \"max_trees_to_visualize\": max_trees_to_visualize,\n            \"feature_importance_analysis\": True,\n            \"prediction_distribution_analysis\": True,\n            \"cross_validation_analysis\": cross_validation_analysis,\n            \"cv_folds\": cv_folds,\n            \"performance_benchmarking\": performance_benchmarking\n        }",
      "return {\n            \"algorithm\": \"Random Forest Regressor\",\n            \"ensemble_structure\": {\n                \"n_estimators\": len",
      "return {'status': 'Insufficient data for convergence analysis'}",
      "return {'status': 'Error in convergence analysis'}",
      "return {'status': 'Error in learning curve analysis'}",
      "return {'error': analysis['error']}",
      "return {\n            'feature_importance': feature_importance,\n            'top_features': [",
      "return {\n            \"feature_importance_analysis\": self.feature_importance_analysis_,\n            \"oob_analysis\": self.oob_analysis_,\n            \"tree_diversity_analysis\": self.tree_diversity_analysis_,\n            \"ensemble_convergence_analysis\": self.ensemble_convergence_analysis_,\n            \"feature_interaction_analysis\": self.feature_interaction_analysis_,\n            \"learning_curve_analysis\": self.learning_curve_analysis_,\n            \"hyperparameter_sensitivity_analysis\": self.hyperparameter_sensitivity_analysis_,\n            \"ensemble_composition_analysis\": self.ensemble_composition_analysis_,\n            \"cross_validation_analysis\": self.cross_validation_analysis_,\n            \"performance_benchmarking\": self.performance_benchmarking_\n        }"
    ]
  },
  "rbf_network_plugin": {
    "score_methods": [],
    "analysis_methods": [
      "get_rbf_analysis",
      "plot_rbf_analysis",
      "_analyze_rbf_network"
    ],
    "metric_calculations": [],
    "result_dictionaries": []
  },
  "ridge_classifier_plugin": {
    "score_methods": [],
    "analysis_methods": [],
    "metric_calculations": [],
    "result_dictionaries": [
      "return {\n            \"name\": self._name,\n            \"category\": self._category,\n            \"type\": self._algorithm_type,\n            \"description\": self._description,\n            \"paper_reference\": self._paper_reference,\n            \"regularization_type\": self._regularization_type,\n            \"strengths\": [\n                \"Handles multicollinearity well\",\n                \"Prevents overfitting with L2 regularization\",\n                \"Stable and robust predictions\",\n                \"Works well with high-dimensional data\",\n                \"Computational efficiency\",\n                \"No hyperparameter tuning required"
    ]
  },
  "ridge_regression_plugin": {
    "score_methods": [
      "_analyze_cross_validation_performance"
    ],
    "analysis_methods": [
      "get_regularization_analysis",
      "_analyze_regularization_effects",
      "_analyze_cross_validation_performance",
      "_analyze_feature_effects"
    ],
    "metric_calculations": [],
    "result_dictionaries": [
      "return {\n            \"regularization_analysis\": self.regularization_analysis_,\n            \"cross_validation_results\": self.cross_validation_results_,\n            \"feature_analysis\": self.feature_analysis_,\n            \"statistical_inference\": self.statistical_inference_\n        }"
    ]
  },
  "stacking_classifier_plugin": {
    "score_methods": [],
    "analysis_methods": [
      "get_stacking_analysis",
      "plot_stacking_analysis",
      "_analyze_meta_features",
      "_analyze_stacking"
    ],
    "metric_calculations": [],
    "result_dictionaries": []
  },
  "voting_classifier_plugin": {
    "score_methods": [],
    "analysis_methods": [
      "get_ensemble_analysis",
      "plot_ensemble_analysis",
      "_analyze_ensemble"
    ],
    "metric_calculations": [],
    "result_dictionaries": []
  },
  "xgboost_classifier_plugin": {
    "score_methods": [],
    "analysis_methods": [
      "get_xgboost_analysis",
      "plot_xgboost_analysis"
    ],
    "metric_calculations": [],
    "result_dictionaries": [
      "return {\n            \"objective\": 'multi:softprob',  # Will be set automatically\n            \"n_estimators\": n_estimators,\n            \"max_depth\": max_depth,\n            \"learning_rate\": learning_rate,\n            \"subsample\": subsample,\n            \"colsample_bytree\": colsample_bytree,\n            \"colsample_bylevel\": colsample_bylevel,\n            \"colsample_bynode\": colsample_bynode,\n            \"reg_alpha\": reg_alpha,\n            \"reg_lambda\": reg_lambda,\n            \"gamma\": gamma,\n            \"min_child_weight\": min_child_weight,\n            \"max_delta_step\": 0,\n            \"scale_pos_weight\": scale_pos_weight,\n            \"grow_policy\": grow_policy,\n            \"max_leaves\": max_leaves,\n            \"max_bin\": 256,\n            \"num_parallel_tree\": num_parallel_tree,\n            \"monotone_constraints\": None,\n            \"interaction_constraints\": None,\n            \"importance_type\": importance_type,\n            \"gpu_id\": gpu_id,\n            \"validate_parameters\": True,\n            \"predictor\": 'auto',\n            \"enable_categorical\": enable_categorical,\n            \"feature_types\": None,\n            \"max_cat_to_onehot\": 4,\n            \"eval_metric\": None,\n            \"early_stopping_rounds\": early_stopping_rounds,\n            \"callbacks\": None,\n            \"random_state\": random_state,\n            \"n_jobs\": -1,\n            \"verbosity\": 0\n        }"
    ]
  },
  "xgboost_regressor_plugin": {
    "score_methods": [
      "_assess_pruning_effectiveness",
      "_analyze_validation_performance"
    ],
    "analysis_methods": [
      "_analyze_feature_importance",
      "_analyze_xgboost_specifics",
      "_analyze_feature_usage_diversity",
      "_analyze_early_stopping",
      "_analyze_training_progression",
      "_analyze_validation_performance",
      "_analyze_convergence",
      "_analyze_regularization_effects",
      "_analyze_cross_validation",
      "_analyze_tree_structure",
      "_analyze_prediction_uncertainty",
      "_analyze_hyperparameter_sensitivity"
    ],
    "metric_calculations": [],
    "result_dictionaries": [
      "return {\n            'predictions': final_predictions,\n            'prediction_std': prediction_std,\n            'prediction_range': prediction_range,\n            'uncertainty_score': uncertainty_score,\n            'confidence_95_lower': confidence_95_lower,\n            'confidence_95_upper': confidence_95_upper,\n            'prediction_interval_width': confidence_95_upper - confidence_95_lower,\n            'boosting_stability': 1.0 /",
      "return {\n            'current_value': current_lr,\n            'sensitivity_score': sensitivity,\n            'recommendation': recommendation\n        }",
      "return {\n            'current_value': current_depth,\n            'sensitivity_score': sensitivity,\n            'recommendation': recommendation\n        }",
      "return {\n            'current_value': total_reg,\n            'sensitivity_score': sensitivity,\n            'recommendation': recommendation\n        }",
      "return {\n            'current_value': total_sampling,\n            'sensitivity_score': sensitivity,\n            'recommendation': recommendation\n        }",
      "return {\n            'feature_importance': analysis,\n            'xgboost_specific': {\n                'gain_importance': analysis.get",
      "return {\n                'validation_fraction_used': self.validation_fraction,\n                'early_stopping_rounds': self.early_stopping_rounds,\n                'eval_metric': self.eval_metric,\n                'note': 'Detailed validation analysis requires training history access'\n            }",
      "return {\n            \"n_estimators\": n_estimators,\n            \"learning_rate\": learning_rate,\n            \"max_depth\": max_depth,\n            \"reg_alpha\": reg_alpha,\n            \"reg_lambda\": reg_lambda,\n            \"gamma\": gamma,\n            \"min_child_weight\": min_child_weight,\n            \"max_delta_step\": max_delta_step,\n            \"subsample\": subsample,\n            \"colsample_bytree\": colsample_bytree,\n            \"colsample_bylevel\": colsample_bylevel,\n            \"colsample_bynode\": colsample_bynode,\n            \"grow_policy\": grow_policy,\n            \"max_leaves\": max_leaves,\n            \"tree_method\": tree_method,\n            \"sketch_eps\": sketch_eps,\n            \"random_state\": random_state,\n            \"n_jobs\": n_jobs,\n            \"verbose\": verbose,\n            \"early_stopping_rounds\": early_stopping_rounds,\n            \"validation_fraction\": validation_fraction,\n            \"eval_metric\": eval_metric,\n            \"booster\": booster,\n            \"objective\": objective,\n            \"importance_type\": importance_type,\n            \"compute_feature_importance\": compute_feature_importance,\n            \"compute_permutation_importance\": compute_permutation_importance,\n            \"xgboost_analysis\": xgboost_analysis,\n            \"early_stopping_analysis\": early_stopping_analysis,\n            \"convergence_analysis\": convergence_analysis,\n            \"regularization_analysis\": regularization_analysis,\n            \"cross_validation_analysis\": cross_validation_analysis,\n            \"tree_analysis\": tree_analysis,\n            \"prediction_uncertainty_analysis\": prediction_uncertainty_analysis,\n            \"hyperparameter_sensitivity_analysis\": hyperparameter_sensitivity_analysis,\n            \"cv_folds\": cv_folds,\n            \"compare_with_sklearn_gbm\": compare_with_sklearn_gbm,\n            \"plot_importance\": plot_importance,\n            \"plot_trees\": plot_trees,\n            \"max_trees_to_plot\": max_trees_to_plot,\n            \"monitor_training\": True,\n            \"feature_interaction_analysis\": True,\n            \"compare_with_lightgbm\": False\n        }",
      "return {'error': analysis['error']}"
    ]
  }
}